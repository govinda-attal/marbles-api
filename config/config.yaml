name: "marbles-trade-network"

description: "The network to be in if you want to stay in the global trade business"

version: 1.0.0

#
# The client section used by GO SDK.
#
client:

  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: Org1
  logging:
    level: info

  # Global configuration for peer, event service and orderer timeouts
  peer:
    timeout:
      connection: 3s
      queryResponse: 45s
      executeTxResponse: 60s
      discovery:
        # Expiry period for discovery service greylist filter
        # The channel client will lock peers that are found to be offline
        # to prevent re-selecting them in subsequent retries.
        # This interval will define how long a peer is greylisted
        greylistExpiry: 5s
  eventService:
    timeout:
      connection: 3s
      registrationResponse: 3s
  orderer:
    timeout:
      connection: 20s
      response: 10s



  # Needed to load users crypto keys and certs.
  cryptoconfig:
    path: "/app/config/crypto-config/"
  
  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Used by user store. Not needed if all credentials are embedded in configuration
    # and enrollments are performed elswhere.
    path: "/tmp/hfc-kvs"

  # BCCSP config for the client. Used by GO SDK.
  BCCSP:
    security:
      enabled: false
      default:
        provider: "SW"
      hashAlgorithm: "SHA2"
      softVerify: true
      ephemeral: false
      level: 256

  tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: false
    
    
#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  mychannel:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    orderers:
      - orderer.example.com

    # Required. list of peers from participating orgs
    peers:
      peer0.org1.example.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

    # [Optional]. what chaincodes are expected to exist on this channel? The application can use
    # this information to validate that the target peers are in the expected state by comparing
    # this list with the query results of getInstalledChaincodes() and getInstantiatedChaincodes()
    chaincodes:
      # the format follows the "canonical name" of chaincodes by fabric code
      - marbles:1.0

  
#
# list of participating organizations in this network
#
organizations:
  ordererorg:
    # Membership Service Provider ID for this organization
    mspID: "OrdererOrg"
    cryptoPath: ordererOrganizations/example.com/users/{username}@example.com/msp
  Org1:
    mspid: Org1MSP
    cryptoPath: peerOrganizations/org1.example.com/users/{userName}@org1.example.com/msp
    peers:
      - peer0.org1.example.com

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#

orderers:
  orderer.example.com:
    url: grpc://35.189.40.214:7050
    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    #TODO to be moved to high level, common for all grpc connections
    grpcOptions:
      ssl-target-name-override: orderer.example.com
      grpc-max-send-message-length: 20
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      #will be taken into consideration if address has no protocol defined and secured connection fails
      allow-insecure: true

    tlsCACerts:
      path: /app/config/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
      


#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: grpc://35.189.40.214:7051
    # this URL is used to connect the EventHub and registering event listeners
    eventUrl: grpc://35.189.40.214:7053
    #TODO to be moved to high level, common for all grpc connections
    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
      grpc.http2.keepalive_time: 15
      keep-alive-time: 0s
      keep-alive-timeout: 20s
      keep-alive-permit: false
      fail-fast: false
      #will be taken into consideration if address has no protocol defined and secured connection fails
      allow-insecure: true
    tlsCACerts:
      path: /app/config/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem