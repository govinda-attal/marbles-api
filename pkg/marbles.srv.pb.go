// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/marbles.srv.proto

/*
Package pkg is a generated protocol buffer package.

It is generated from these files:
	proto/marbles.srv.proto

It has these top-level messages:
	TransferMarbleRq
	TransferMarbleRs
	FetchMarbleRq
	FetchMarbleRs
*/
package pkg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TransferMarbleRq struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NewOwner string `protobuf:"bytes,2,opt,name=newOwner" json:"newOwner,omitempty"`
}

func (m *TransferMarbleRq) Reset()                    { *m = TransferMarbleRq{} }
func (m *TransferMarbleRq) String() string            { return proto.CompactTextString(m) }
func (*TransferMarbleRq) ProtoMessage()               {}
func (*TransferMarbleRq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TransferMarbleRq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TransferMarbleRq) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

type TransferMarbleRs struct {
	TxID string `protobuf:"bytes,1,opt,name=txID" json:"txID,omitempty"`
}

func (m *TransferMarbleRs) Reset()                    { *m = TransferMarbleRs{} }
func (m *TransferMarbleRs) String() string            { return proto.CompactTextString(m) }
func (*TransferMarbleRs) ProtoMessage()               {}
func (*TransferMarbleRs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TransferMarbleRs) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

type FetchMarbleRq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *FetchMarbleRq) Reset()                    { *m = FetchMarbleRq{} }
func (m *FetchMarbleRq) String() string            { return proto.CompactTextString(m) }
func (*FetchMarbleRq) ProtoMessage()               {}
func (*FetchMarbleRq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FetchMarbleRq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FetchMarbleRs struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Owner string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	Size  int32  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (m *FetchMarbleRs) Reset()                    { *m = FetchMarbleRs{} }
func (m *FetchMarbleRs) String() string            { return proto.CompactTextString(m) }
func (*FetchMarbleRs) ProtoMessage()               {}
func (*FetchMarbleRs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FetchMarbleRs) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FetchMarbleRs) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *FetchMarbleRs) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func init() {
	proto.RegisterType((*TransferMarbleRq)(nil), "proto.TransferMarbleRq")
	proto.RegisterType((*TransferMarbleRs)(nil), "proto.TransferMarbleRs")
	proto.RegisterType((*FetchMarbleRq)(nil), "proto.FetchMarbleRq")
	proto.RegisterType((*FetchMarbleRs)(nil), "proto.FetchMarbleRs")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Marbles service

type MarblesClient interface {
	Transfer(ctx context.Context, in *TransferMarbleRq, opts ...grpc.CallOption) (*TransferMarbleRs, error)
	Fetch(ctx context.Context, in *FetchMarbleRq, opts ...grpc.CallOption) (*FetchMarbleRs, error)
}

type marblesClient struct {
	cc *grpc.ClientConn
}

func NewMarblesClient(cc *grpc.ClientConn) MarblesClient {
	return &marblesClient{cc}
}

func (c *marblesClient) Transfer(ctx context.Context, in *TransferMarbleRq, opts ...grpc.CallOption) (*TransferMarbleRs, error) {
	out := new(TransferMarbleRs)
	err := grpc.Invoke(ctx, "/proto.Marbles/Transfer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marblesClient) Fetch(ctx context.Context, in *FetchMarbleRq, opts ...grpc.CallOption) (*FetchMarbleRs, error) {
	out := new(FetchMarbleRs)
	err := grpc.Invoke(ctx, "/proto.Marbles/Fetch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Marbles service

type MarblesServer interface {
	Transfer(context.Context, *TransferMarbleRq) (*TransferMarbleRs, error)
	Fetch(context.Context, *FetchMarbleRq) (*FetchMarbleRs, error)
}

func RegisterMarblesServer(s *grpc.Server, srv MarblesServer) {
	s.RegisterService(&_Marbles_serviceDesc, srv)
}

func _Marbles_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferMarbleRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarblesServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Marbles/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarblesServer).Transfer(ctx, req.(*TransferMarbleRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marbles_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchMarbleRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarblesServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Marbles/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarblesServer).Fetch(ctx, req.(*FetchMarbleRq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Marbles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Marbles",
	HandlerType: (*MarblesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transfer",
			Handler:    _Marbles_Transfer_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _Marbles_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/marbles.srv.proto",
}

func init() { proto.RegisterFile("proto/marbles.srv.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0x4d, 0x2c, 0x4a, 0xca, 0x49, 0x2d, 0xd6, 0x2b, 0x2e, 0x2a, 0xd3, 0x03, 0x8b,
	0x08, 0xb1, 0x82, 0x29, 0x29, 0x99, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0xfd, 0xc4, 0x82, 0x4c,
	0xfd, 0xc4, 0xbc, 0xbc, 0xfc, 0x92, 0xc4, 0x92, 0xcc, 0xfc, 0xbc, 0x62, 0x88, 0x22, 0x25, 0x27,
	0x2e, 0x81, 0x90, 0xa2, 0xc4, 0xbc, 0xe2, 0xb4, 0xd4, 0x22, 0x5f, 0xb0, 0x09, 0x41, 0x85, 0x42,
	0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6,
	0x90, 0x14, 0x17, 0x47, 0x5e, 0x6a, 0xb9, 0x7f, 0x79, 0x5e, 0x6a, 0x91, 0x04, 0x13, 0x58, 0x1c,
	0xce, 0x57, 0x52, 0xc3, 0x30, 0xa3, 0x18, 0x64, 0x46, 0x49, 0x85, 0xa7, 0x0b, 0xcc, 0x0c, 0x10,
	0x5b, 0x49, 0x99, 0x8b, 0xd7, 0x2d, 0xb5, 0x24, 0x39, 0x03, 0x9f, 0x45, 0x4a, 0xbe, 0xa8, 0x8a,
	0x8a, 0xb1, 0xba, 0x46, 0x84, 0x8b, 0x35, 0x1f, 0xc9, 0x29, 0x10, 0x0e, 0x48, 0x65, 0x71, 0x66,
	0x55, 0xaa, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x98, 0x6d, 0xb4, 0x9e, 0x91, 0x8b, 0x1d,
	0x62, 0x54, 0xb1, 0x50, 0x28, 0x17, 0x07, 0xcc, 0x9d, 0x42, 0xe2, 0x10, 0xff, 0xeb, 0xa1, 0x7b,
	0x5e, 0x0a, 0x87, 0x44, 0xb1, 0x92, 0x78, 0xd3, 0xe5, 0x27, 0x93, 0x99, 0x04, 0x95, 0x78, 0xf4,
	0xcb, 0x0c, 0xf5, 0x4b, 0xa0, 0xb2, 0x56, 0x8c, 0x5a, 0x42, 0xbe, 0x5c, 0xac, 0x60, 0x17, 0x0b,
	0x89, 0x40, 0xb5, 0xa2, 0x78, 0x52, 0x0a, 0x9b, 0x68, 0xb1, 0x92, 0x04, 0xd8, 0x34, 0x21, 0x21,
	0x01, 0x90, 0x69, 0x69, 0x20, 0x29, 0xfd, 0x6a, 0x90, 0xd7, 0x6a, 0x9d, 0xb4, 0xa2, 0x34, 0xd2,
	0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xcb, 0x32, 0xf3, 0x52,
	0x12, 0x75, 0x13, 0x4b, 0x4a, 0x12, 0x73, 0x60, 0x91, 0xac, 0x0b, 0x8a, 0xcb, 0x82, 0xec, 0xf4,
	0x24, 0x36, 0xb0, 0xd1, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0x97, 0x24, 0x91, 0x04,
	0x02, 0x00, 0x00,
}
